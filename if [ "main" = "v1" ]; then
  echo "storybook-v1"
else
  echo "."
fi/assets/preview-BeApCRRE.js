import{c as d}from"./chunk-ZGA76URP-CA258KPk.js";import{_ as g}from"./iframe-C2A3HTkk.js";import{r as F,a as h,d as P,s as k}from"./client-D2oCQSOe.js";import{s as v}from"./link-BaYVyrkW.js";import{s as b}from"./i18n-Bloz8h-o.js";import"../sb-preview/runtime.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-CBqU2yxZ.js";const c="logo.png",l="@inseefr/lunatic-dsfr",f="https://github.com/inseefr/Lunatic-dsfr",p='"Marianne", arial, sans-serif',m="monospace",w=d({base:"dark",appBg:"#1E1E1E",appContentBg:"#161616",barBg:"#161616",colorSecondary:"#8585F6",textColor:"#FFFFFF",brandImage:c,brandTitle:l,brandUrl:f,fontBase:p,fontCode:m}),C=d({base:"light",appBg:"#F6F6F6",appContentBg:"#FFFFFF",barBg:"#FFFFFF",colorSecondary:"#000091",textColor:"#212121",brandImage:c,brandTitle:l,brandUrl:f,fontBase:p,fontCode:m});var n=F();class y{constructor(){this.isPending=!0;let t,o;this.pr=new Promise((e,r)=>{t=s=>{n.overwriteReadonlyProp(this,"isPending",!1),e(s)},o=s=>{n.overwriteReadonlyProp(this,"isPending",!1),r(s)}}),this.resolve=t,this.reject=o}}let i=!1;async function E(a){const{defaultColorScheme:t,verbose:o,nextParams:e}=a;if(h.assert(P),i)return;i=!0;const r=e===void 0?s=>s():e.registerEffectAction;k({colorSchemeExplicitlyProvidedAsParameter:t,doPersistDarkModePreferenceWithCookie:e===void 0?!1:e.doPersistDarkModePreferenceWithCookie,registerEffectAction:r}),window.dsfr={verbose:o,mode:"react"},await g(()=>import("./dsfr.module.min-aS5SxQA8.js"),__vite__mapDeps([]),import.meta.url),u.resolve(),r(()=>{window.dsfr.start()})}const u=new y;u.pr;function x(a){const{defaultColorScheme:t,verbose:o=!1,Link:e,useLang:r}=a;e!==void 0&&v({Link:e}),r!==void 0&&b({useLang:r}),E({defaultColorScheme:t,verbose:o,nextParams:void 0})}x({defaultColorScheme:"system",useLang:()=>"fr"});const M={parameters:{actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/i}},backgrounds:{disable:!0},darkMode:{current:"dark",light:C,dark:w},docs:{autodocs:!0}}};export{M as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
